"use server";

import { getServerSession } from "next-auth";
import { authOptions } from "@app/api/auth/[...nextauth]/route";
import { PrismaClient } from "@prisma/client";
import { revalidatePath } from "next/cache";

async function updateAlbum(data, revalidate = true) {
  const prisma = new PrismaClient();
  const session = await getServerSession(authOptions);
  const uid = session?.user.id;

  // Only aid is compulsory
  const { aid, photos, albumName, photoOrder } = data;
  const res = await prisma.$transaction(async (prisma) => {
    // If updated album name
    let albumData = albumName ? { name: albumName } : {};

    // If updated photoOrder
    if (photoOrder) {
      albumData = { ...albumData, photoOrder };
    }

    if (photos) {
      // Insert photos
      const newPhotos = await prisma.photo.createMany(
        {
          data: photos.map((photo) => ({
            name: photo.name,
            aid,
            uid,
            aperture: parseFloat(photo.aperture),
            shutterspeed: photo.shutterspeed,
            iso: parseInt(photo.iso),
            description: photo.description || null,
            date: photo.date,
            focalLength: parseFloat(photo.focalLength),
            meteringMode: photo.meteringMode || null,
            exposureMode: photo.exposureMode || null,
            lensModel: photo.lensModel || null,
            cameraModel: photo.cameraModel || null,
            editingSoftware: photo.editingSoftware || null,
            pid: photo.fileId, // generated by b2
          })),
        },

        { timeout: 10000 }
      );

      if (!newPhotos || newPhotos.count === 0) {
        return { status: 400, message: "Unable to create photos", ok: false };
      }

      // Update thumbnail
      const thumbnail = await prisma.photo.findFirst({
        where: {
          aid,
          uid,
        },
      });

      if (!thumbnail) {
        return { status: 404, message: "Thumbnail not found", ok: false };
      }

      albumData = {
        ...albumData,
        thumbnail: {
          connect: {
            pid: thumbnail.pid,
          },
        },
      };
    }

    const updatedAlbum = await prisma.album.update({
      where: { aid_uid: { aid, uid } },
      data: albumData,
      include: {
        photos: true,
      },
    });
    if (!updatedAlbum) {
      return { status: 400, message: "Unable to update album", ok: false };
    }
    return { status: 200, message: "Success", data: updatedAlbum, ok: true };
  });

  if (res.ok && revalidate) {
    revalidatePath("/", "layout");
  }
  return res;
}

export default updateAlbum;
